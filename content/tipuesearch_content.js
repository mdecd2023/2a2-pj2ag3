var tipuesearch = {"pages": [{'title': 'About', 'text': '2a2-pj2ag3 \n 倉儲: https://github.com/mdecd2023/2a2-pj2ag3 \n 網站: https://mdecd2023.github.io/2a2-pj2ag3/content/index.html \n 組員:41023118 吳政憲 \n \xa0\xa0\xa0\xa0\xa0\xa0 41023120 呂昕叡 \n \xa0\xa0\xa0\xa0\xa0\xa0 41023122 李彥廷 \n \xa0\xa0\xa0\xa0\xa0\xa0 41023124 李茂廷 \n', 'tags': '', 'url': 'About.html'}, {'title': 'pj2', 'text': '\n \n \n \n \n 1.製作實體記分板 \n \xa0 \n 記分板檔案 \n 2.記分板 程式 \n \xa0 得分後球會回到中心球員不會回到原來的地方 \n \n 記分板草圖 \n 帶有記分板+場地 \n \n \n \n \n \n \n', 'tags': '', 'url': 'pj2.html'}, {'title': 'pj1', 'text': '', 'tags': '', 'url': 'pj1.html'}, {'title': 'ag11', 'text': 'pj1ag11倉儲: https://github.com/mdecd2023/2a-pj1ag11 \n pj1ag11網頁: https://mdecd2023.github.io/2a-pj1ag11/content/index.html \n 2023_remoteapi_bubbleRob.7z \xa0 ( 2aw6 如何在 chatGPT 協助下開發 remote API 控制程式.mp4 ) \n 透過鍵盤控制 bubbleRob 的場景與 remote API 程式.7z \xa0 ( 示範操作影片.mp4 ) \n 利用newbing_bubbleRob_remoteapi1.py >tools>go 執行程式 \n 並且下載pip install keyboard 才可利用鍵盤控制bubbleRob執行前進 , 後退和左右等指令來操控機器人 \n \n \n 製作球場步驟與sensor \n \n \n \n \n \n   \n \n 導入記分板與更改錯誤 \n \n \n \n \n \n \n \n   \n \n sensor,球與本體的偵測錯誤 \n \n \n \n \n \n \n \n   \n \n 修正sensor,球體與本體之錯誤(可正常執行遊玩) \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n 程式下載 :  football程式 \n \n football 製作心得 : \n 在製作本次的football作業時，有遇到一些問題，有關於sensor,記分板,與本體偵測與球體偵測的問題，遇到最嚴重的問題是球體偵測的問題，因為沒有辦法找到程式中球體的正確數值，所以都無法偵測球體的得分，所以尋求的同學的幫助，在程式中加了關於球的檢測數值，再導入程式中的數值，就可以正常的運行並遊玩了。 \n', 'tags': '', 'url': 'ag11.html'}, {'title': 'ag17', 'text': '組員:41023120呂昕叡、41023118吳政憲 \n pj1倉儲: https://github.com/mdecd2023/2a-pj1ag17 \n pj1網頁: https://mdecd2023.github.io/2a-pj1ag17/content/football.html \n 製作足球場  onshape檔案 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0  CoppeliaSim檔案 \n \n \n \n \n \n \n 導入主程式和記分板 \n   \n \n \n \n \n \n football檔案 \n \n \n \xa0 \n這段代碼用於進行一些初始化操作。具體來說，我們將一個名為 count 的變量初始化為 18000，這個變量用於存儲倒計時的剩餘時間，單位為秒。我們還將 score1 和 score2 變量初始化為 0，這兩個變量用於表示兩個玩家的得分。 \n \n \n \xa0 \n這段程式碼是用來建立一個使用者介面(UI)，讓使用者可以看到遊戲時間和兩方的得分。程式中使用了XML格式的字串來定義介面的樣式，其中包括了三個標籤(Label)，分別是時間、玩家1得分和玩家2得分，以及對應的位置和樣式設定。 \n \n \n \xa0 \n \xa0 \nbubbleRobBase=18 ball=23這是用程式測出來的距離 sysCall_init() 函數用於初始化仿真環境和一些變量，而 sysCall_actuation() 函數用於執行機器人的運動和動作，以及更新計時器和得分標籤的顯示。 sensor1 和 sensor2 變量是用來存儲兩個傳感器的句柄，這些傳感器可能被機器人用來檢測周圍環境。bubbleRobBase 變量存儲了機器人的基座句柄。ball 變量存儲了一個球的句柄。initialBubbleRobPosition 和 initialBubbleRobOrientation 分別是機器人基座的初始位置和方向。initialballPosition 和 initialballOrientation 分別是球的初始位置和方向。 \n \n \n \n 雙人對戰 \n \n \n 查詢IP位址\n 按下Windows + R 開啟「執行」視窗後，輸入「cmd」後點選確定。 \n 系統自動開啟「命令提示字元」視窗，接下來輸入「ipconfig /all」並按Enter。 \n 在「IPv4」位址後面就是電腦目前的 IP 位址。 \n \n \n \n   \n 心得:我們因為實在不知道怎麼打記分板的程式所以參考了同學的程式,結果根本不知道要如何更改本來只有一條程式錯結果越用越多錯,所以直接去請教了同學,經過他的解答和解或知道了原來要測接腳,每個名子要打對不然根本偵測不到還有接腳要對,且了解到使用XML創建UI界面，設置計時器和時間到會停止模擬的功能,雖然過程並不美好但還是有去解決,感謝其他同學的幫助。 \n \n \n \n \n', 'tags': '', 'url': 'ag17.html'}, {'title': 'w9', 'text': '程式檔案\xa0 組長 \xa0 組員1 \xa0 組員2  組員3 \n \n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': '會議記錄錄影 \n \n 41023118 負責第1.2題 \n 41023120 負責第3 題 \n 41023122 負責第5題 \n 41023124 負責第4題 \n \n 1.What is zmqRemoteAPI, and how does it relate to CoppeliaSim? \n zmqRemoteAPI是一個通訊接口，允許外部程序與機器人仿真軟件CoppeliaSim進行交互。它基於ZeroMQ庫，為遠程應用程序提供了一種輕量級和高效的方式來訪問CoppeliaSim的功能。 \n 使用zmqRemoteAPI，用戶可以使用各種編程語言（如Python、C++和Lua）控制和監視CoppeliaSim中的仿真。該接口允許外部程序和仿真之間交換數據，使用戶可以創建自定義腳本和應用程序來擴展CoppeliaSim的功能。 \n 總之，zmqRemoteAPI是一個通訊接口，使外部程序能夠與CoppeliaSim進行通訊，為用戶提供了一種靈活和高效的方式來控制和監視軟件中的仿真。 \n 2.How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI? \n 在CoppeliaSim場景中添加一個Remote API Server對象，可以在CoppeliaSim中通過Add-ons > Remote API Server選項添加。 \n 在Python中使用zmq模組建立一個socket，並連接到CoppeliaSim的Remote API Server。需要指定CoppeliaSim的IP地址和端口號。 \n 發送指令給CoppeliaSim，例如運動控制、數據讀寫等操作。 \n 接收來自CoppeliaSim的回傳信息，例如機器人的位置、碰撞情況等。 \n 在Python中可以使用vrep.py或vrepConst.py這些API函數庫，可以方便地使用zmqRemoteAPI與CoppeliaSim進行通信。使用zmqRemoteAPI可以輕鬆實現Python與CoppeliaSim之間的數據傳輸和控制操作，適用於控制仿真、數據傳輸、遠程控制、集成外部模塊等多種應用場景。 \n 3.What are some common use cases for zmqRemoteAPI in CoppeliaSim? \n zmqRemoteAP \n zmqRemoteAPI是CoppeliaSim中非常重要的一個功能，可以實現與外部程式的通訊，使CoppeliaSim更加靈活和強大。使用zmqRemoteAPI可以控制仿真，實現自動化控制，例如控制機器人運動、碰撞、動作等。同時也可以將CoppeliaSim中的數據傳輸到外部程式中，例如進行數據分析、處理和可視化等 \n 4.What are the advantages and disadvantages of using zmqRemoteAPI compared to other methods of communication between Python and CoppeliaSim? \n zmqRemoteAPI 是 CoppeliaSim 中的一種通訊協議，具有輕量級和高性能的特點，允許您從外部應用程序與 CoppeliaSim 進行交互。它基於 ZeroMQ，一個流行的消息庫，提供了進程間快速可靠的通訊。在 CoppeliaSim 中，zmqRemoteAPI 可以用於遠程控制仿真，從外部應用程序控制正在運行的 CoppeliaSim 仿真的行為，例如啟動和停止仿真、設置仿真參數、以及實時檢索仿真數據。此外，它還可用於自動化重複的仿真任務，例如參數掃描、靈敏度分析和優化例程，這可以幫助您節省時間並提高仿真工作流的效率。zmqRemoteAPI 還可與其他軟件工具和框架集成，例如 Python、MATLAB、ROS 和 LabVIEW，這使您可以利用這些工具在您的仿真中，並創建複雜的跨學科仿真。此外，您還可以使用 zmqRemoteAPI 開發自定義插件，以擴展 CoppeliaSim 的功能，例如添加新傳感器、執行器或控制器到仿真環境中，或與外部硬件接口的插件。最後，zmqRemoteAPI 還可用於實時調試和測試仿真代碼和腳本，例如設置斷點、檢查變量，並遠程逐步執行代碼，這可以幫助您更有效地識別和修復錯誤和問題。 \n 5.Can you give an example of a project or task that you could complete using zmqRemoteAPI in CoppeliaSim? \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11', 'text': '\n 帶有執行 zmqRemoteAPI, CoppeliaSim 與 Portable Solid Edge (或使用電腦的 CAD) 所需的環境, 準備到第一排中間三台電腦中進行 pj2 協同查驗. \n 查驗項目: \n \n \n \n github 分組倉儲內容維護 (各學員是否會使用  https 與 SSH  維護 pj2 分組網站) \n CoppeliaSim 場景建置與 zmqRemoteAPI 操控 (各學員是否會 建立足球場景 , 並跨電腦 以 zmq 進行操控 ) \n 建立對戰場景所需的 CAD 零組件建立並轉入 CoppeliaSim 備用 (各學員是否會從 CAD  建立零組件轉入場景 運用) bubbleRob.ttt   bubbleRob_zmq_examples.7z \n \n \n \n \n 帶有記分板+場地 \n \n', 'tags': '', 'url': 'w11.html'}]};